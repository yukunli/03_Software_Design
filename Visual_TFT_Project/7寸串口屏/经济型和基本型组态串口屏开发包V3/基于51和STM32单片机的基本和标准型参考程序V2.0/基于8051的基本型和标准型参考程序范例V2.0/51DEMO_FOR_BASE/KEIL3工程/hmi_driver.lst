C51 COMPILER V8.02   HMI_DRIVER                                                            12/27/2013 09:38:01 PAGE 1   


C51 COMPILER V8.02, COMPILATION OF MODULE HMI_DRIVER
OBJECT MODULE PLACED IN hmi_driver.obj
COMPILER INVOKED BY: d:\Keil51801\C51\BIN\C51.EXE src\hmi_driver.c OMF2 WARNINGLEVEL(1) OPTIMIZE(9,SPEED) BROWSE DEBUG P
                    -RINT(.\hmi_driver.lst) OBJECT(hmi_driver.obj)

line level    source

   1          /************************************版权申明********************************************
   2          **                             广州大彩光电科技有限公司
   3          **                             http://www.gz-dc.com
   4          **-----------------------------------文件信息--------------------------------------------
   5          ** 文件名称:   hmi_user_uart.c
   6          ** 创建时间:   2011-05-18
   7          ** 文件说明:   大彩串口屏驱动函数库
   8          ** 技术支持：  Tel: 020-82186683  Email: hmi@gz-dc.com
   9          ** 修改时间   : 2013-11-28
  10          ** 1)          补全指令集里面的所有驱动函数 
  11          --------------------------------------------------------------------------------------*/
  12          
  13          
  14          #include "hmi_driver.h"
  15          //串口发送一字节数据
  16          #define TX_8(P1) SendChar((P1)&0xFF);
  17          //串口发送两个字节数据
  18          #define TX_8X2(P1,P2) TX_8(P1)TX_8(P2)
  19          //串口发送三个字节数据
  20          #define TX_8X3(P1,P2,P3) TX_8X2(P1,P2)TX_8(P2)
  21          //串口发送四个字节数据
  22          #define TX_8X4(P1,P2,P3,P4) TX_8X2(P1,P2) TX_8X2(P3,P4)
  23          //串口发送N个字节的数据
  24          #define TX_8XN(P,N) SendNU8((uint8 *)P,N);
  25          
  26          //串口发送一个WORD类型（16位）的数据
  27          #define TX_16(P1) TX_8((P1)>>8);TX_8(P1);
  28          //串口发送二个WORD类型（16位）的数据
  29          #define TX_16X2(P1,P2) TX_16(P1) TX_16(P2);
  30          //串口发送三个WORD类型（16位）的数据
  31          #define TX_16X3(P1,P2,P3) TX_16X2(P1,P2) TX_16(P3);
  32          //串口发送四个WORD类型（16位）的数据
  33          #define TX_16X4(P1,P2,P3,P4) TX_16X2(P1,P2) TX_16X2(P3,P4)
  34          //串口发送五个WORD类型（16位）的数据
  35          #define TX_16X5(P1,P2,P3,P4,P5) TX_16X3(P1,P2,P3) TX_16X2(P4,P5)
  36          //串口发送六个WORD类型（16位）的数据
  37          #define TX_16X7(P1,P2,P3,P4,P5,P6,P7) TX_16X4(P1,P2,P3,P4) TX_16X3(P5,P6,P7)
  38          //串口发送七个WORD类型（16位）的数据
  39          #define TX_16XN(P,N) SendNU16((uint16 *)P,N);
  40          //串口发送N个WORD类型（16位）的数据
  41          #define TX_32(P1) TX_16X2(((P1)>>16),P1)
  42          
  43          //COMMAND_BODY-封装基本命令
  44          #define COMMAND_BODY(CMD,BODY) \
  45                  {SendBeginCMD();TX_8(CMD) BODY SendEndCmd();}
  46          
  47          //CONTROL_BODY-封装控件更新指令
  48          #define CONTROL_BODY(SUB_CMD,BODY) \
  49                  {SendBeginCMD();TX_8(0xB1)TX_8(SUB_CMD)TX_16X2(screen_id,control_id) BODY SendEndCmd();}
  50          
  51          void SendNU8(uint8 *pData,uint16 nDataLen)
  52          {
  53   1          uint16 i = 0;
  54   1          for (; i<nDataLen; ++i)
C51 COMPILER V8.02   HMI_DRIVER                                                            12/27/2013 09:38:01 PAGE 2   

  55   1          {
  56   2              TX_8(pData[i])
  57   2          }
  58   1      }
  59          
  60          void SendNU16(uint16 *pData,uint16 nDataLen)
  61          {
  62   1          uint16 i = 0;
  63   1          for (; i<nDataLen; ++i)
  64   1          {
  65   2              TX_16(pData[i])
  66   2          }
  67   1      }
  68          
  69          void SendBeginCMD()
  70          {
  71   1          TX_8(0xEE)
  72   1      }
  73          
  74          void SendEndCmd()
  75          {
  76   1          TX_32(0xFFFCFFFF)
  77   1      }
  78          /*******************************************************
  79          下面的函数 setHandShake_1() 和SetHandShake() 是一样的
  80          实现了发送一个完整的串口指令帧 EE 04 FF FC FF FF 的功能
  81          后者把发送的过程已经打包。前者可以看到每个数据的发送过程
  82          ********************************************************/
  83          void setHandShake_1()
  84          {
  85   1      SendBeginCMD();
  86   1      SendChar(0x04);
  87   1      SendEndCmd();
  88   1      }
  89                  void SetHandShake()
  90          COMMAND_BODY(0x04,)
  91          
  92          void SetDeviceReset ()
  93          COMMAND_BODY(0x07,TX_8X4(0x35,0x5a,0x53,0xa5))
  94          
  95          void SetFcolor(uint16 fcolor)
  96          COMMAND_BODY(0x41,TX_16(fcolor))
  97          
  98          void SetBcolor(uint16 bcolor)
  99          COMMAND_BODY(0x42,TX_16(bcolor))
 100          
 101          void GUI_CleanScreen()
 102          COMMAND_BODY(0x01,)
 103          
 104          void SetTextSpace(uint8 x_w, uint8 y_w)
 105          COMMAND_BODY(0x43,TX_8X2(x_w,y_w))
 106          
 107          void SetFont_Region(uint8 enable,uint16 length,uint16 width)
 108          COMMAND_BODY(0x45,TX_8(enable)TX_16X2(length,width))
 109          
 110          void SetFilterColor(uint16 fillcolor_dwon, uint16 fillcolor_up)
 111          COMMAND_BODY(0x44,TX_16X2(fillcolor_dwon,fillcolor_up))
 112          
 113          void DisText(uint16 x, uint16 y,uint8 back,uint8 font,uchar *strings )
 114          COMMAND_BODY(0x20,TX_16X2(x,y)TX_8X2(back,font)SendStrings(strings);)
 115          
 116          void DisCursor(uint8 enable,uint16 x, uint16 y,uint8 length,uint8 width )
C51 COMPILER V8.02   HMI_DRIVER                                                            12/27/2013 09:38:01 PAGE 3   

 117          COMMAND_BODY(0x21,TX_8(enable)TX_16X2(x,y)TX_8X2(length,width))
 118          
 119          void DisFull_Image(uint16 image_id,uint8 masken)
 120          COMMAND_BODY(0x31,TX_16(image_id)TX_8(masken))
 121          
 122          void DisArea_Image(uint16 x,uint16 y,uint16 image_id,uint8 masken)
 123          COMMAND_BODY(0x32,TX_16X3(x,y,image_id)TX_8(masken))
 124          
 125          void DisCut_Image(uint16 x,uint16 y,uint16 image_id,uint16 image_x,uint16 image_y,uint16 image_l, uint16 i
             -mage_w,uint8 masken)
 126          COMMAND_BODY(0x33,TX_16X7(x,y,image_id,image_x,image_y,image_l,image_w)TX_8(masken))
 127          
 128          void DisFlashImage(uint16 x,uint16 y,uint16 flashimage_id,uint8 enable,uint8 playnum)
 129          COMMAND_BODY(0x80,TX_16X3(x,y,flashimage_id)TX_8X2(enable,playnum))
 130          
 131          void GUI_FcolorDot(uint16 x,uint16 y)
 132          COMMAND_BODY(0x50,TX_16X2(x,y))
 133          
 134          void GUI_BcolorDot(uint16 x,uint16 y)
 135          COMMAND_BODY(0x58,TX_16X2(x,y))
 136          
 137          void GUI_Line(uint16 x0, uint16 y0, uint16 x1, uint16 y1)
 138          COMMAND_BODY(0x51,TX_16X4(x0,y0,x1,y1))
 139          
 140          void GUI_ConSpaceDots(uint16 x,uint16 Xspace, uint8 *pDot,uint16 dot_cnt)
 141          COMMAND_BODY(0x59,TX_16(x)TX_8XN(pDot,dot_cnt))
 142          
 143          
 144          void GUI_FcolorConOffsetDots(uint16 x,uint16 y,uint8 *dot_offset,uint16 dot_cnt )
 145          COMMAND_BODY(0x75,TX_16X2(x,y)TX_16XN(dot_offset,dot_cnt))
 146          
 147          void GUI_BcolorConOffsetDots(uint16 x,uint16 y,uint8 *dot_offset,uint16 dot_cnt)
 148          COMMAND_BODY(0x76,TX_16X2(x,y)TX_16XN(dot_offset,dot_cnt))
 149          
 150          
 151          void GUI_FcolorConDots(uint16 *dot,uint16 dot_cnt)
 152          COMMAND_BODY(0x68,TX_16XN(dot,dot_cnt*2))
 153          
 154          void GUI_BcolorConDots(uint16 *dot,uint16 dot_cnt)
 155          COMMAND_BODY(0x69,TX_16XN(dot,dot_cnt*2))
 156          
 157          void GUI_Circle(uint16 x, uint16 y, uint16 r)
 158          COMMAND_BODY(0x52,TX_16X3(x,y,r))
 159          
 160          void GUI_CircleFill(uint16 x, uint16 y, uint16 r)
 161          COMMAND_BODY(0x53,TX_16X3(x,y,r))
 162          
 163          void GUI_Arc(uint16 x,uint16 y, uint16 r,uint16 sa, uint16 ea)
 164          COMMAND_BODY(0x67,TX_16X5(x,y,r,sa,ea))
 165          
 166          void GUI_Rectangle(uint16 x0, uint16 y0, uint16 x1,uint16 y1 )
 167          COMMAND_BODY(0x54,TX_16X4(x0,y0,x1,y1))
 168          
 169          void GUI_RectangleFill(uint16 x0, uint16 y0, uint16 x1,uint16 y1 )
 170          COMMAND_BODY(0x55,TX_16X4(x0,y0,x1,y1))
 171          
 172          void GUI_Ellipse(uint16 x0, uint16 y0, uint16 x1,uint16 y1 )
 173          COMMAND_BODY(0x56,TX_16X4(x0,y0,x1,y1))
 174          
 175          void GUI_EllipseFill(uint16 x0, uint16 y0, uint16 x1,uint16 y1 )
 176          COMMAND_BODY(0x57,TX_16X4(x0,y0,x1,y1))
 177          
C51 COMPILER V8.02   HMI_DRIVER                                                            12/27/2013 09:38:01 PAGE 4   

 178          void SetBackLight(uint8 light_level)
 179          COMMAND_BODY(0x60,TX_8(light_level))
 180          
 181          void SetPowerSaving(uint8 enable, uint8 bl_off_level, uint8 bl_on_level, uint8  bl_on_time)
 182          COMMAND_BODY(0x77,TX_8X4(enable,bl_off_level,bl_on_level,bl_on_time))
 183          
 184          void SetBuzzer(uint8 time)
 185          COMMAND_BODY(0x61,TX_8(time))
 186          
 187          void Get_Revision(void)
 188          COMMAND_BODY(0xFE,)
 189          
 190          void SetTouchScreen(uint8 cmd)
 191          COMMAND_BODY(0x70,TX_8(cmd))
 192          
 193          void SetTouchScreen_Adj()
 194          COMMAND_BODY(0x72,)
 195          
 196          void TestTouchScreen()
 197          COMMAND_BODY(0x73,)
 198          
 199          void SetCommBps(uint8 baudset)
 200          COMMAND_BODY(0xA0,TX_8(baudset))
 201          
 202          void SetMatrixKB(uint8 cmd)
 203          COMMAND_BODY(0x79,TX_8(cmd))
 204          
 205          void WriteAddrdData(uint32 Addr,uint8 *pData,uint16 dat_len)
 206          COMMAND_BODY(0x87,TX_32(Addr)TX_8XN(pData,dat_len))
 207          
 208          void ReadAddrdData(uint32 Addr,uint16 Len)
 209          COMMAND_BODY(0x88,TX_32(Addr)TX_16(Len))
 210          
 211          void WriteLayer(uint8 layer)
 212          COMMAND_BODY(0xA1,TX_8(layer))
 213          
 214          void DisplyLayer(uint8 layer)
 215          COMMAND_BODY(0xA2,TX_8(layer))
 216          
 217          void CopyLayer(uint8 src_layer,uint8 dest_layer)
 218          COMMAND_BODY(0xA4,TX_8X2(src_layer,dest_layer))
 219          
 220          void ClearLayer(uint8 layer)
 221          COMMAND_BODY(0x05,TX_8(layer))
 222          
 223          
 224          void AutoClearLayer_en (uint8 enable)
 225          COMMAND_BODY(0x06,TX_8(enable))
 226          
 227          void SavePrintscreen_Into_Flash(uint8 Pic_id)
 228          COMMAND_BODY(0x46,TX_8(Pic_id))
 229          
 230          void DisplayPrintscreen_In_Flash (uint8 Pic_id)
 231          COMMAND_BODY(0x47,TX_8(Pic_id))
 232          
 233          void GUI_DispRTC(uint8 enable,uint8 mode,uint8 font,uint16 color,uint16 x,uint16 y)
 234          COMMAND_BODY(0x85,TX_8X3(enable,mode,font)TX_16X3(color,x,y))
 235          
 236          void SetRTCTime(uint8 sec,uint8 min,uint8 hour,uint8 day,uint8 week,uint8  mon,uint8  year)
 237          COMMAND_BODY(0x81,TX_8(sec)TX_8(min)TX_8(hour)TX_8(day)TX_8(week)TX_8(mon)TX_8(year))
 238          
 239          void ReadRTCTime(void)  
C51 COMPILER V8.02   HMI_DRIVER                                                            12/27/2013 09:38:01 PAGE 5   

 240          COMMAND_BODY(0x82,)
 241          
 242          void Locksysconfig(void)
 243          COMMAND_BODY(0x08,TX_8X4(0xa5,0x5a,0x5f,0xf5))
 244          
 245          void Unlocksysconfig(void)
 246          COMMAND_BODY(0x09,TX_8X4(0xde,0xed,0x13,0x31))
 247          
 248          void GetScreen(void)
 249          COMMAND_BODY(0xB1,TX_8(0x01))
 250          
 251          void SetScreen(uint16 screen_id)
 252          COMMAND_BODY(0xB1,TX_8(0x00)TX_16(screen_id))
 253          
 254          void SetScreenUpdate(uint8 enable)
 255          COMMAND_BODY(0xB3,TX_8(enable))
 256          
 257          void ShowControl(uint16 screen_id,uint16 control_id,uint8 visible)
 258          CONTROL_BODY(0x03,TX_8(visible))
 259          
 260          void SetButtonValue(uint16 screen_id,uint16 control_id,uchar state)
 261          CONTROL_BODY(0x10,TX_8(state))
 262          
 263          void SetTextValue(uint16 screen_id,uint16 control_id,uchar *str)
 264          CONTROL_BODY(0x10,SendStrings(str);)
 265          
 266          void SetProgressValue(uint16 screen_id,uint16 control_id,uint32 value)
 267          CONTROL_BODY(0x10,TX_32(value))
 268          
 269          void SetMeterValue(uint16 screen_id,uint16 control_id,uint32 value)
 270          CONTROL_BODY(0x10,TX_32(value))
 271          
 272          void SetSliderValue(uint16 screen_id,uint16 control_id,uint32 value)
 273          CONTROL_BODY(0x10,TX_32(value))
 274          
 275          void GetControlValue(uint16 screen_id,uint16 control_id)
 276          CONTROL_BODY(0x11,)
 277          
 278          void AnimationStart(uint16 screen_id,uint16 control_id)
 279          CONTROL_BODY(0x20,)
 280          
 281          void AnimationStop(uint16 screen_id,uint16 control_id)
 282          CONTROL_BODY(0x21,)
 283          
 284          void AnimationPause(uint16 screen_id,uint16 control_id)
 285          CONTROL_BODY(0x22,)
 286          
 287          void AnimationPlayFrame(uint16 screen_id,uint16 control_id,uint8 frame_id)
 288          CONTROL_BODY(0x23,TX_8(frame_id))
 289          
 290          void AnimationPlayPrev(uint16 screen_id,uint16 control_id)
 291          CONTROL_BODY(0x24,)
 292          
 293          
 294          void AnimationPlayNext(uint16 screen_id,uint16 control_id)
 295          CONTROL_BODY(0x25,)
 296          
 297          void GraphChannelAdd(uint16 screen_id,uint16 control_id,uint8 channel,uint16 color)
 298          CONTROL_BODY(0x30,TX_8(channel)TX_16(color))
 299          
 300          void GraphChannelDel(uint16 screen_id,uint16 control_id,uint8 channel)
 301          CONTROL_BODY(0x31,TX_8(channel))
C51 COMPILER V8.02   HMI_DRIVER                                                            12/27/2013 09:38:01 PAGE 6   

 302          
 303          void GraphChannelDataAdd(uint16 screen_id,uint16 control_id,uint8 channel,uint8 *pData,uint16 nDataLen)
 304          CONTROL_BODY(0x32,TX_8(channel)TX_16(nDataLen)TX_8XN(pData,nDataLen))
 305          
 306          void GraphChannelDataInsert(uint16 screen_id,uint16 control_id,uint8 channel,uint8 *pData,uint16 nDataLen)
 307          CONTROL_BODY(0x35,TX_8(channel)TX_16(nDataLen)TX_8XN(pData,nDataLen))
 308          
 309          void GraphChannelDataClear(uint16 screen_id,uint16 control_id,uint8 channel)
 310          CONTROL_BODY(0x33,TX_8(channel))
 311          
 312          void GraphSetViewport(uint16 screen_id,uint16 control_id,int16 x_offset,uint16 x_mul,int16 y_offset,uint16
             - y_mul)
 313          CONTROL_BODY(0x34,TX_16X4(x_offset,x_mul,y_offset,y_mul))


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   3821    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----     355
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
