C51 COMPILER V8.02   CMD_QUEUE                                                             12/27/2013 09:38:00 PAGE 1   


C51 COMPILER V8.02, COMPILATION OF MODULE CMD_QUEUE
OBJECT MODULE PLACED IN cmd_queue.obj
COMPILER INVOKED BY: d:\Keil51801\C51\BIN\C51.EXE src\cmd_queue.c OMF2 WARNINGLEVEL(1) OPTIMIZE(9,SPEED) BROWSE DEBUG PR
                    -INT(.\cmd_queue.lst) OBJECT(cmd_queue.obj)

line level    source

   1          /************************************版权申明********************************************
   2          **                             广州大彩光电科技有限公司
   3          **                             http://www.gz-dc.com
   4          **-----------------------------------文件信息--------------------------------------------
   5          ** 文件名称:   cmd_queue.c
   6          ** 修改时间:   2011-05-18
   7          ** 文件说明:   用户MCU串口驱动函数库
   8          ** 技术支持：  Tel: 020-82186683  Email: hmi@gz-dc.com Web:www.gz-dc.com
   9          **--------------------------------------------------------------------------------------*/
  10          
  11          
  12          #include "cmd_queue.h"
  13          
  14          typedef struct _QUEUE
  15          {
  16              qsize _head;
  17              qsize _tail;
  18              qdata _data[QUEUE_MAX_SIZE];
  19          } QUEUE;//串口数据接收队列结构体
  20          
  21          static QUEUE que = {0,0,0};
  22          static qdata cmd_state = 0;
  23          static qsize cmd_pos = 0;
  24          
  25          /********************************
  26          *名    称： queue_reset
  27          *功    能    串口接收队列复位
  28          *入口参数： 无
  29          *出口参数： 无
  30          *********************************/
  31          void queue_reset()
  32          {
  33   1          que._head = que._tail = 0;
  34   1          cmd_pos = cmd_state = 0;
  35   1      }
  36          
  37          /**********************************************
  38          *名    称： queue_push
  39          *功    能   存入一个数据到串口接收队列（FIFO）中
  40          *入口参数： 无
  41          *出口参数： 无
  42          **********************************************/
  43          void queue_push(qdata _data)
  44          {
  45   1          qsize pos = (que._head+1)%QUEUE_MAX_SIZE;
  46   1          if(pos!=que._tail)//非满状态
  47   1          {
  48   2              que._data[que._head] = _data;
  49   2              que._head = pos;
  50   2          }
  51   1      }
  52          /**********************************************
  53          *名    称： queue_pop
  54          *功    能   从串口接收队列(FIFO)中取出一个字节数据
C51 COMPILER V8.02   CMD_QUEUE                                                             12/27/2013 09:38:00 PAGE 2   

  55          *入口参数： 无
  56          *出口参数： 无
  57          **********************************************/
  58          static void queue_pop(qdata* _data)
  59          {
  60   1          if(que._tail!=que._head)//非空状态
  61   1          {
  62   2              *_data = que._data[que._tail];
  63   2              que._tail = (que._tail+1)%QUEUE_MAX_SIZE;
  64   2          }
  65   1      }
  66          /**********************************************
  67          *名    称： queue_size
  68          *功    能   获取串口接收队列(FIFO)的长度
  69          *入口参数： 无
  70          *出口参数： 无
  71          **********************************************/
  72          static qsize queue_size()
  73          {
  74   1          return ((que._head+QUEUE_MAX_SIZE-que._tail)%QUEUE_MAX_SIZE);
  75   1      }
  76          
  77          /******************************************************************
  78          *名    称： queue_find_cmd
  79          *功    能   获取串口接收队列(FIFO)中一个完整的帧
  80                      一个完整的帧是以EE开头，FF FC FF FF 结尾的一个数据帧
  81          *入口参数： 无
  82          *出口参数： 无
  83          ********************************************************************/
  84          qsize queue_find_cmd(qdata *buffer,qsize buf_len)
  85          {
  86   1          qsize cmd_size = 0;
  87   1          qdata _data = 0;
  88   1          while(queue_size()>0)
  89   1          {
  90   2              //取一个数据
  91   2              queue_pop(&_data);
  92   2      
  93   2              if(cmd_pos==0&&_data!=0xEE)//帧头出错，跳过
  94   2                  continue;
  95   2      
  96   2              if(cmd_pos<buf_len)//防止缓冲区溢出
  97   2                  buffer[cmd_pos++] = _data;
  98   2      
  99   2              //判断帧尾
 100   2              if(_data==0xFF)
 101   2              {
 102   3                  switch (cmd_state)
 103   3                  {
 104   4                  case 2:
 105   4                      cmd_state = 3;
 106   4                      break; //FF FC FF ?? (最后一个字节不对)
 107   4                  case 3:
 108   4                      cmd_state = 4;
 109   4                      break; //FF FC FF FF 正确的帧尾
 110   4                  default:
 111   4                      cmd_state = 1;
 112   4                      break; //FF ?? ?? ??(最后三个字节不对)
 113   4                  }
 114   3              }
 115   2              else if(_data==0xFC)
 116   2              {
C51 COMPILER V8.02   CMD_QUEUE                                                             12/27/2013 09:38:00 PAGE 3   

 117   3                  switch (cmd_state)
 118   3                  {
 119   4                  case 1:
 120   4                      cmd_state = 2;
 121   4                      break; //FF FC ?? ??(最后二个字节不对)
 122   4                  case 3:
 123   4                      cmd_state = 2;
 124   4                      break; //FF FC FF FC 正确的帧尾
 125   4                  default:
 126   4                      cmd_state = 0;
 127   4                      break; //?? ?? ?? ??(全部字节不对)
 128   4                  }
 129   3              }
 130   2              else
 131   2                  cmd_state = 0;
 132   2      
 133   2              //得到完整的帧尾
 134   2              if(cmd_state==4)
 135   2              {
 136   3                  cmd_size = cmd_pos;
 137   3                  cmd_state = 0;
 138   3                  cmd_pos = 0;
 139   3                  return cmd_size;
 140   3              }
 141   2          }
 142   1      
 143   1          return 0;//没有形成完整的一帧
 144   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    290    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     47       8
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
